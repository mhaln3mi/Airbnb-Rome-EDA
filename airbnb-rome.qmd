---
title: "Airbnb Rome EDA"
author: "Maan Al Neami,<br>  Nourah Almutairi,<br>  Ammar Alfaifi,<br> Salman Al-Harbi,<br>  Dina Alkhammash"
format:
  html:
    toc: true
    toc-depth: 1
    code-fold: true
kernel: python3
---

<br><br>

# Introduction:

In this report we will be analyzing Rome Airbnb properties dataset from inside airbnb and try to analyze it to find what variables influences the income generted by the property.

<br>

### Why Rome?

We choose Rome because itâ€™s one of the most visited cities by tourists in Europe. Thanks to the rich history, amazing food, and the relatively cheaper prices compared to other major european cities. All of these factors make Rome one of the most sought after investments in the hospitality and tourism industry.

<br>

### About the dataset source

We got our dataset from [inside airbnb](http://insideairbnb.com/get-the-data/). Inside Airbnb is a project that provides data and advocacy about Airbnb's impact on residential communities. They provide data and information to empower communities to understand, decide and control the role of renting residential homes to tourists.

<br>

### Data dictionary

| Variable      | Description |
| ----------- | ----------- |
| host_name    | Name of the host.       |
| neighbourhood   | Name of the neighbourhood.       |
| latitude  | Used to make an interactive map.        |
| longitude   | Used to make an interactive map.        |
| room_type   | Entire apt, private room, hotel room.        |
| Price   | Price in Euro.         |
| minimum_nights   | minimum number of night stay for the listing.       |
| number_of_reviews   | The number of reviews the listing has.        |
| last_review   | The date of the last/newest review.      |
| availability_365   | The availability of the listing x days in the future.        |
| number_of_reviews_ltm   | The number of reviews the listing has (in the last 12 months).        |
| amenities   | A list of amenities in the listing. 

<br>

# Data Munging

First we will be doing basic data cleaning

<br>

### Importing libraries and Data

```{python}

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import folium
from folium.plugins import MarkerCluster
from folium import plugins
from folium.plugins import FastMarkerCluster
from folium.plugins import HeatMap
from ast import literal_eval
from plotly.subplots import make_subplots


df = pd.read_csv('data/listings.csv')
df2 = pd.read_csv('data/listings-detailed.csv')

df.head(5)

```

<br>

### Cleaning Data

First we checked for duplicates and null values

```{python}
df.duplicated().sum()

df.isnull().sum()

```

<br>

there was no duplicates but we have null values in `host_id`, `host_name`, `neighbourhood_group`, `licence` and .
We decided to drop the missing values for all columns except reviews.

<br>

Second we used ```apply```  to convert the `price` in the dataset to float. We also decided to drop `price` values of 0 and bigger than 50000 as there was nothing interesting to investigate there and they will miss up our result.


```{python}
df2["price"]=df2["price"].apply(lambda x : float(x[1:].replace(",","")))
df2.drop(df2[df2["price"]>=50000].index,axis=0,inplace=True)
df2.drop(df2[df2["price"]==0].index,axis=0,inplace=True)
```

<br>

The ```amenities``` column has amenities written as a list inside a string, so we will use ```literal_eval``` from ```ast``` to turn it into lists of strings, then use ```explode``` from ```pandas``` to give each element of the list it's own row, and lastly we will perform a one hot encoding using ```crosstab```

```{python}
df2["amenities"] = df2["amenities"].apply(literal_eval)
exploded_df2 = df2.explode('amenities')
df_new = pd.crosstab(exploded_df2['id'],exploded_df2['amenities']).rename_axis(None,axis=1).add_prefix("amenities_")
```

<br>


```{python}
df = pd.concat([df.set_index("id"), df_new], axis=1, join='inner').reset_index()
df = df.join(df2[["review_scores_rating", "review_scores_accuracy", "review_scores_cleanliness", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_value"]])
```

<br>

# EDA


<br>

### Listings by neighbourhood

Here we want to see how many listings we have per `neighbourhood`

```{python}
dist_plt = df['neighbourhood'].value_counts().nlargest(5).plot.bar()
plt.xticks(rotation = 30)
```

We can see from this fig above that most of the listings in our dataset are located at ```I Centro Storico```.

<br>

Now lets see how these listing appear on a map using ```folium``` library

```{python}
Long=12.6
Lat=41.8
locations = list(zip(df.latitude, df.longitude))

map1 = folium.Map(location=[Lat,Long], zoom_start=10.5)
FastMarkerCluster(data=locations).add_to(map1)
map1
```

As we can see, most of the listings are located in the city center.

<br>


Next we want to see the distribution of listings type in the dataset

```{python}
df['room_type'].value_counts().plot(kind = 'bar', color = ['g', 'r', 'b', 'y'])
plt.title('Listings type count')
plt.xticks(rotation = 30)
```

The plot above shows us that most listings are of type Entire Apt, followed by Private room and Hotel room.

<br>

Lets also see what's the median price per neighbourhood


```{python}
mode_dist_plt = df.groupby('neighbourhood')['price'].median().nlargest(5).plot.bar()
plt.title('Median price per neighbourhood (Top 5)')
plt.xticks(rotation = 30)
```

The highest median price is in ```I Centro Storico```, followed by ```XIII Aurelia```.

<br>

Now lets check for mean price per neighbourhood


```{python}
mean_dist_plt = df.groupby('neighbourhood')['price'].mean().nlargest(5).plot.bar()
plt.title('Mean price per neighbourhood (Top 5)')
plt.xticks(rotation = 30)
```


The highest mean price is in ```XIII Aurelia```, followed by ```I Centro Storico```.  

<br>


### Amenities and Price


#### What are the most frequent amenities in Roma listings?

```{python}
amenities = {}
for c in df.columns:
	if "amenities" in c: 
		amenities[c] = df[c].value_counts()[1]
amenities_list = sorted(amenities, key=amenities.get, reverse=True)[:10]
amenities = {c:df[c].value_counts()[1] for c in amenities_list}
fig = px.bar(x = amenities.keys(), y = amenities.values(), title = "Most Frequent Amenities", labels={
	"y": "Count",
	"x": "Amenities"
})
fig.show()
```

We can see that Wifi is the most frequent amenity in Roma's listings, followed bt Essentials, Hair dryer, and Long term stay. This amenities might be the basic or standard amenities that a vistor to Roma would want.


<br>

#### What is the average price for the most frequent Amenities?
```{python}
amenities = {}
for c in df.columns:
	if "amenities" in c: 
		amenities[c] = df[c].value_counts()[1]
amenities_list = sorted(amenities, key=amenities.get, reverse=True)[:10]
amenities = {c:df.groupby(c)['price'].mean()[1] for c in amenities_list}
fig = px.bar(x = amenities.keys(), y = amenities.values(), title = "Average Price for the Most Frequent Amenities", labels={
	"y": "Average Price",
	"x": "Amenities"
})
fig.show()
```

from the above graph we can see that listsings that have Air Conditioning, have the highest average price with 185.24


<br>

#### What are the most expensive Amenities?
```{python}
amenities = {}

for c in df.columns:
	if "amenities" in c: 
		amenities[c] = df.groupby(c)['price'].mean()[1]

amenities_list = sorted(amenities, key=amenities.get, reverse=True)[:10]
amenities = {c:df.groupby(c)['price'].mean()[1] for c in amenities_list}
amenities_count = {c:df[c].value_counts()[1] for c in amenities_list}

fig = px.bar(x = amenities.keys(), y = amenities.values(), title = "Average Price for the Most Expnsive Amenities", labels={
	"y": "Average Price",
	"x": "Amenities"
})

fig.show()
```

The most expensive listings amenity is Outdoor seating  with a 10.5K, followed by Piastre electric stove, Balcony, and Security cameras. 
<br>

#### What is the distribution of the most expensive Amenities?
```{python}
amenities = {}

for c in df.columns:
	if "amenities" in c: 
		amenities[c] = df.groupby(c)['price'].mean()[1]

amenities_list = sorted(amenities, key=amenities.get, reverse=True)[:10]
amenities_count = {c:df[c].value_counts()[1] for c in amenities_list}

fig = px.bar(x = amenities_count.keys(), y = amenities_count.values(), title = "The Distribution of the Most Expnsive Amenities", labels={
	"y": "Count",
	"x": "Amenities"
})

fig.show()
```
We can see that only one listing has an outdoor seating and Piastre electric stove, while three listings have Balcony and two lsitings have security camera, although these amenities are in expensive listings they seems not to be frequent in Roma. 

<br>


### Distribution of Review's Rating Scores



```{python}
for c in df.columns:
	if "scores" in c:
		df[c].fillna(df[c].mean(), inplace=True)
```


<br>


```{python}
rating_location_category = pd.cut(df.review_scores_location,bins=[1, 2, 3, 4, 5, 6], labels=["Terrible","Bad","Okay","Good", "Great"], right=False)
df['rating_location_category'] = rating_location_category
sns.countplot(x = rating_location_category)
```


<br>


```{python}
rating_category = pd.cut(df.review_scores_rating,bins=[1, 2, 3, 4, 5, 6],labels=["Terrible","Bad","Okay","Good", "Great"], right=False)
df['rating_category'] = rating_category
sns.countplot(x = rating_category)
```


<br>


```{python}
value_category = pd.cut(df.review_scores_value,bins=[1, 2, 3, 4, 5, 6],labels=["Terrible","Bad","Okay","Good", "Great"], right=False)
df['value_category'] = value_category
sns.countplot(x = value_category, data=df)
```

It seems that in all three types of review's scores,Good is the most frequent one followed by 
<br>

### Does the rating score effect the price



```{python}
data = df.groupby("rating_category")["price"].mean()
sns.barplot(x=data.index, y=data)
```

It seems that there is no relation between review_scores_rating and price.

<br>


#### what is the income of the past year and the expected income for the next 3 months?

- More data cleaning


```{python}
romeListings = df2.copy()
romeListings.at[19678,"minimum_minimum_nights"]=7
romeListings.drop(14443,inplace=True)
romeListings.drop(7022,inplace=True)
romeListings.at[5888,"minimum_minimum_nights"]=3
romeListings.drop(7250,inplace=True)
romeListings.at[11454,"minimum_minimum_nights"]=5
romeListings.at[20421,"price"]=121.51
romeListings.at[23230,"price"]=90
romeListings.at[9646,"price"]=92.73
romeListings.at[4737,"minimum_minimum_nights"]=3
romeListings.drop(romeListings[romeListings["price"]==0].index,inplace=True)

```


<br>


- add min_booked_nights_past_12m and min_income_past_12m column to the dataset


```{python}
#the minimum estmtation of the number of booked nights of each listing in the last 12 month (current date = 2022-06-07)
romeListings["min_booked_nights_past_12m"]=romeListings.apply(lambda x : x["number_of_reviews_ltm"]*x["minimum_nights_avg_ntm"],axis=1)

#the minimum estmtation of the income of each listing in the last 12 month (current date = 2022-06-07)
romeListings["min_income_past_12m"]=romeListings.apply(lambda x : x["min_booked_nights_past_12m"]*x["price"],axis=1)
```


<br>

- add expected_booked_nights_coming_3m and expected_income_coming_3m column to the dataset


```{python}
#the expected number of booked nights of each listing in the next 3 month (current date = 2022-06-07)
romeListings["expected_booked_nights_coming_3m"]=romeListings.apply(lambda x : 90-x["availability_90"],axis=1)

#the expected income of each listing  in the next 3 month (current date = 2022-06-07)
romeListings["expected_income_coming_3m"]=romeListings.apply(lambda x : (90-x["availability_90"])*x["price"],axis=1)
```


<br>

#### what neighbourhoods have highest averege price ?


```{python}
temp=romeListings.groupby("neighbourhood_cleansed")["price"].mean().sort_values(ascending=False).head(5).reset_index()
fig = px.bar(temp,x = "neighbourhood_cleansed", y = "price", title = "The highest price per night average of listings within a neighbourhood",color="neighbourhood_cleansed", labels={
	"y": "Price",
	"x": "Neighbourhood"
})
fig.show()
```


<br>


#### what neighbourhoods have highest averege of booked nights over the next 3 month ?

```{python}
temp=romeListings.groupby("neighbourhood_cleansed")["expected_booked_nights_coming_3m"].mean().sort_values(ascending=False).head(50).reset_index()
fig = px.bar(temp,x = "neighbourhood_cleansed", y = "expected_booked_nights_coming_3m", title = "The highest booked nights average of listings within a neighbourhood",color="neighbourhood_cleansed", labels={
	"y": "Booked nights (next 3 months)",
	"x": "Neighbourhood"
},range_y=[0,90])
fig.show()
```


<br>

#### what room types have highest averege price ?

```{python}
temp=romeListings.groupby("room_type")["price"].mean().sort_values(ascending=False).head(5).reset_index()
fig = px.bar(temp,x = "room_type", y = "price", title = "The highest price per night average of listings of a room type  ",color="room_type", labels={
	"y": "Price",
	"x": "Room Type"
})
fig.show()
```


<br>

#### what room types have highest averege of booked nights over the next 3 month ?


```{python}
temp=romeListings.groupby("room_type")["expected_booked_nights_coming_3m"].mean().sort_values(ascending=False).reset_index()
fig = px.bar(temp,x = 'room_type', y = "expected_booked_nights_coming_3m", title = "The highest booked nights average of listings of a room type",color="room_type", labels={
	"y": "Booked nights (next 3 months)",
	"x": "Room Type"
},range_y=[0,90])
fig.show()
```


<br>

#### what (room type ,neighbourhood) combinations have the highest averege booked nights ?


```{python}
nBookedNightinNigh=romeListings.groupby(["room_type","neighbourhood_cleansed"])["expected_booked_nights_coming_3m"].agg(["mean","count"])
temp=nBookedNightinNigh[nBookedNightinNigh["count"]>11]["mean"].sort_values(ascending=False).head(5)
fig = px.bar(x = list(map(str,list(temp.keys()))), y = temp.values, title = "The highest booked nights average of listings for every (Room Type,Neighbourhood) combination", labels={
	"y": "Booked nights (next 3 months)",
	"x": "(Room Type,Neighbourhood)"
},range_y=[0,90])
fig.show()

```


<br>

#### what neighbourhoods have highest minumam income average for the past 12 months ?

```{python}

temp=romeListings.groupby("neighbourhood_cleansed")["min_income_past_12m"].mean().sort_values(ascending=False).head(5).reset_index()
fig = px.bar(temp,x = "neighbourhood_cleansed", y = "min_income_past_12m", title = "The highest minimum income of listings within a Neighbourhood",color="neighbourhood_cleansed", labels={
	"y": "average minimum income of listings (past 12 months)",
	"x": "Neighbourhood"
})

fig.show()
```


<br>

#### what neighbourhoods with the highest expected income average for the next 3 months ?


```{python}
temp= romeListings.groupby("neighbourhood_cleansed")["expected_income_coming_3m"].mean().sort_values(ascending=False).head(5).reset_index()
fig = px.bar(temp,x = "neighbourhood_cleansed", y = "expected_income_coming_3m", title = "The highest expected income of listings within a Neighbourhood",color="neighbourhood_cleansed", labels={
	"y": "average expected income of listings (next 3 months)",
	"x": "Neighbourhood"
})

fig.show()
```


<br>

#### what room types have highest minumam income average for the past 12 months ?


```{python}
temp=romeListings.groupby("room_type")["min_income_past_12m"].mean().sort_values(ascending=False).head(5).reset_index()
fig = px.bar(temp,x = "room_type", y = "min_income_past_12m", title = "The highest minimum income of listings based on room type",color="room_type", labels={
	"y": "average minimum income of listings (past 12 months)",
	"x": "Room Type"
})

fig.show()
```


<br>

#### what room types have highest expected income average for the next 3 months ?

```{python}
temp=romeListings.groupby("room_type")["expected_income_coming_3m"].mean().sort_values(ascending=False).head(5).reset_index()
fig = px.bar(temp,x = "room_type", y = "expected_income_coming_3m", title = "The highest expected income of listings based on room type",color="room_type", labels={
	"y": "average expected income of listings (next 3 months)",
	"x": "Room Type"
})

fig.show()
```


<br>

#### what (room type ,neighbourhood) combinations have the highest averege income ?

```{python}
nBookedNightinNigh=romeListings.groupby(["room_type","neighbourhood_cleansed"])["expected_income_coming_3m"].agg(["mean","count"])
temp=nBookedNightinNigh[nBookedNightinNigh["count"]>11]["mean"].sort_values(ascending=False).head(5)
fig = px.bar(x = list(map(str,list(temp.keys()))), y = temp.values, title = "The highest income average of listings for every (Room Type,Neighbourhood) combination", labels={
	"y": "average income (next 3 months)",
	"x": "(Room Type,Neighbourhood)"
},)
fig.show()
```


<br>


### does the host's account appearance effects the listing income ?

```{python}
temp=romeListings.groupby("host_has_profile_pic")["expected_income_coming_3m"].mean().reset_index()
fig = px.bar(temp,x = ["No","Yes"], y = "expected_income_coming_3m", title = "",color=["No","Yes"], labels={
	"y": "average income (next 3 months)",
	"x": "host has a profile pic ?"
})
fig.show()
```




<br>



```{python}
temp= romeListings.groupby("host_identity_verified")["expected_income_coming_3m"].mean().reset_index()
fig = px.bar(temp,x = ["No","Yes"], y = "expected_income_coming_3m", title = "",color=["No","Yes"], labels={
	"y": "average income (next 3 months)",
	"x": "is the host identity verified ?"
},)
fig.show()
```


<br>


```{python}
temp= romeListings.groupby("instant_bookable")["expected_income_coming_3m"].mean()
fig = px.bar(temp,x = ["No","Yes"], y = "expected_income_coming_3m", title = "",color=["No","Yes"], labels={
	"y": "average income (next 3 months)",
	"x": "can be booked instantly ?"
},)
fig.show()
```


<br>

#### does the response time effects the the densisty of the number of the booked nights ?

```{python}
f, axes = plt.subplots(2, 2, figsize=(20,8))
ax = sns.kdeplot(romeListings[romeListings["host_response_time"]=="a few days or more"]["expected_booked_nights_coming_3m"],x="expected_booked_nights_coming_3m",color="red", fill=True,ax=axes[0,0])
ax = sns.kdeplot(romeListings[romeListings["host_response_time"]=="within a day"]["expected_booked_nights_coming_3m"],x="expected_booked_nights_coming_3m",color="green", fill=True,ax=axes[0,1])
ax = sns.kdeplot(romeListings[romeListings["host_response_time"]=="within a few hours"]["expected_booked_nights_coming_3m"],x="expected_booked_nights_coming_3m",color="orange",  fill=True,ax=axes[1,0])
ax = sns.kdeplot(romeListings[romeListings["host_response_time"]=="within an hour"]["expected_booked_nights_coming_3m"],x="expected_booked_nights_coming_3m",color="blue",  fill=True,ax=axes[1,1])
```



<br>

### Bathrooms, Beds, Reviews and price

```{python}
eds = df2[[ 'price', 'number_of_reviews', ]]

g = sns.pairplot(eds,
                 aspect=1.2,
                 diag_kws=dict(shade=True),
                 diag_kind="kde", kind="reg")
fig = g.fig 
fig.subplots_adjust(top=0.93, wspace=0.3)
fig.suptitle('Attributes Pairwise Plots', 
              fontsize=14, fontweight='bold');

sns.set(style="white")
sns.relplot(x="price", y="bathrooms_text",
            sizes=(40, 400), alpha=.8, palette="coolwarm",
            height=10, data=df2)
```



<br>


```{python}
plt.figure(figsize=(15,8))
sns.jointplot( x='number_of_reviews',y ='price',data = df2, kind = 'reg', color = 'pink' , space = 0.8, height = 9)
plt.title('Number of reviews Against price', 
              fontsize=12, fontweight='bold');
```



<br>


```{python}
sns.set(style="white")
sns.relplot(x="room_type", y="price", size = 'beds',
            sizes=(40, 400), alpha=.8, palette="coolwarm",
            height=10, data=df2)
```



<br>


```{python}
# data = romeListings.groupby("rating_location_category")["min_income_past_12m"].mean().sort_values(ascending=False)
# sns.barplot(x=data.index, y=data)
# plt.title("The Average minimum income of listings based on location rating")
# plt.xlabel("Rating")
# plt.ylabel("average minimum income of listings (past 12 months)")
# plt.show()
```




<br>

### Does the Location Rating effect the minimum income of listings (past 12 months)

```{python}
romeListings[["rating_location_category", "rating_category", "value_category"]] = df[["rating_location_category", "rating_category", "value_category"]]

ax = sns.relplot(data= romeListings, x="review_scores_location", y ="min_income_past_12m" ,alpha=0.25)
plt.xticks([0, 1, 2, 3, 4, 5], ["0", "1", "2", "3", "4", "5"])
plt.yscale("log")
plt.title("The minimum income of listings based on location rating")
plt.xlabel("Rating")
plt.ylabel("average minimum income of listings (past 12 months)")
plt.show()
```
We can see that there is an upward trend that indicate, that listings with higher location review score had higher average minimum income for the past year.
<br>


```{python}
data = romeListings.groupby("rating_location_category")["min_income_past_12m"].mean().sort_values(ascending=False)
sns.barplot(x=data.index, y=data)
plt.title("The Average minimum income of listings based on location rating")
plt.xlabel("Rating")
plt.ylabel("average minimum income of listings (past 12 months)")
plt.show()
```

We can see here also that Good and Great, both have higher average minimum income than the rest of the categories.

What about the expected income for the next 3 months? let's check it out.
<br>

### Does the Location Rating effect the expected average income (next 3 months)

```{python}
data = romeListings.groupby("rating_location_category")["expected_income_coming_3m"].mean().sort_values(ascending=False)
sns.barplot(x=data.index, y=data)
plt.title("The Expected Income in 3 Months for Listings based on rating")
plt.xlabel("Rating")
plt.ylabel("average income (next 3 months)")
plt.show()
```

Frome the above figure, it looks like listings with Great location review score are expected to have the highest minimum income for the next three months.

<br>


```{python}
data = romeListings.groupby("rating_location_category")["expected_booked_nights_coming_3m"].mean().sort_values(ascending=False)
sns.barplot(x=data.index, y=data)
plt.title("The Expected Booked Nights in 3 Months for Listings based on rating")
plt.xlabel("Rating")
plt.ylabel("Booked nights (next 3 months)")
plt.show()

```

It seems that listings with Great, Good or Okay location review score are expected to be booked more than the other categories for the next three months. 

<br>

#### What (Bedrooms, Room Type) combination have highest expected income average for the next 3 months?

```{python}
nBookedNightinNigh=romeListings.groupby(["room_type","bedrooms"])["expected_income_coming_3m"].agg(["mean","count"])
temp=nBookedNightinNigh[nBookedNightinNigh["count"]>11]["mean"].sort_values(ascending=False).head(5)
fig = px.bar(x = list(map(str,list(temp.keys()))), y = temp.values, title = "The highest Expected Income average of listings for every (Bedrooms, Room Type) combination", labels={
	"y": "average income (next 3 months)",
	"x": "(Bedrooms, Room Type)"
})
fig.show()
```

Listings that are an entire home or an apartment seems to be expected to have the highest income average for the next three months, and an entire home or an apartment with seven bedrooms are expected to have the highest income average with 65.5K

<br>

#### What (Bedrooms, Room Type) combination have highest minimum income average for the past 12 months?

```{python}
nBookedNightinNigh=romeListings.groupby(["room_type","bedrooms"])["min_income_past_12m"].agg(["mean","count"])
temp=nBookedNightinNigh[nBookedNightinNigh["count"]>11]["mean"].sort_values(ascending=False).head(5)
fig = px.bar(x = list(map(str,list(temp.keys()))), y = temp.values, title = "The highest income average of listings for every (Room Type, Number of Bedrooms) combination", labels={
	"y": "average minimum income of listings (past 12 months)",
	"x": "(Room Type, Number of Bedrooms)"
})
fig.show()
```

From the above figure, it seems for the past year, listings that are an entire home or an apartment also have the highest income average for the past year, and an entire home or an apartment with seven bedrooms have the highest income average with 7.8K.


<br>


```{python}
data = romeListings.groupby("bedrooms")["expected_income_coming_3m"].agg(["mean", "count"])
data = data[data["count"]>11]["mean"].sort_values(ascending=False).head(10)
fig = px.bar(x = data.index, y = data, title = "The highest Expected Income average of listings for every Bedrooms count", labels={
	"y": "average income (next 3 months)",
	"x": "Number of Bedrooms"
})
fig.show()
```

We can see that listings with seven bedrooms are expected to have the highest average income for the next three months, followed by 8, 6 and 5 bedrooms.



# Conclusion

<br> 

### To increase the profitabilty of your invesment in Rome:

- Have a verification mark.
- Have a profile picture.
- Invest in the top neighbourhood: â€˜II Centro Storicoâ€™.
- Invest in the room type: Entire Home/Apt in â€˜II Centro Storicoâ€™, with 7 bedrooms
- Try not to exceed the average prices, might lead to bad Scores Value.
- Try to response as quick as possible.
- Provide an instant booking.
- Include the following amenities: WiFi, Hair Dryer, â€¦ 


<br>


# Sources

- http://insideairbnb.com/get-the-data/
- http://insideairbnb.com/rome
- https://python-visualization.github.io/folium/
